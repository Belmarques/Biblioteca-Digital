generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password_hash String
  phone         String?
  role          Role          @default(MEMBER)
  created_at    DateTime      @default(now())
  Loan          Loan[]
  reservation   reservation[]

  @@map("users")
}

enum Disponibilidade {
  DISPONIVEL
  INDISPONIVEL
}

enum LoanStatus {
  ATIVO
  FINALIZADO
}

model Book {
  id              String          @id @default(uuid())
  titulo          String
  author          Author          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  disponibilidade Disponibilidade @default(DISPONIVEL)
  authorId        String
  genre           Genre           @relation(fields: [genreId], references: [id])
  genreId         String
  Loan            Loan[]
  reservation     reservation[]

  @@map("books")
}

model Author {
  id   String @id @default(uuid())
  name String
  Book Book[]
}

model Genre {
  id   String @id @default(uuid())
  name String @unique
  Book Book[]
}

model Loan {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  book        Book       @relation(fields: [bookId], references: [id])
  barrowed_ad DateTime   @default(now())
  returned_at DateTime?
  userId      String
  bookId      String
  status      LoanStatus @default(ATIVO)

  @@map("loans")
}

enum StatusReservation {
  PENDENTE
  FINALIZADO
}

model reservation {
  id         String            @id @default(uuid())
  reservedAt DateTime          @default(now())
  status     StatusReservation
  user       User              @relation(fields: [userId], references: [id])
  book       Book              @relation(fields: [bookId], references: [id])
  userId     String
  bookId     String

  @@map("reservations")
}
